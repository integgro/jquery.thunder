(function (e) { e.thunder = {}; e.thunder.settings = { version: "1.1.6", images: { loadingModal: "/content/jquerythunder/images/loading_modal.gif", loadingGrid: "/content/jquerythunder/images/loading_grid.gif", loadingForm: "/content/jquerythunder/images/loading_form.gif" }, confirm: { label: { yes: "Yes", no: "No"} }, alert: { label: { ok: "OK"}} }; var t = { message: { create: function (t, n, r, i) { var s = { animate: true, focus: false, close: { show: true, title: "Close this notification" }, autoClose: { enable: false, delay: 5e3} }; e.extend(s, i); t.addClass("thunder-notification"); t.hide(); t.empty(); var o = e({}); var u = t.parent().css("overflow") == "visible" ? e("html:not(:animated),body:not(:animated)") : t.parent(); var a = e('<div class="thunder-notification-content"></div>'); t.addClass(n); t.append(a); if (e.isArray(r) && r.length > 0) { var f = e("<ul></ul>"); e.each(r, function () { f.append(e("<li></li>").html(this.Text)) }); a.html(f) } else { a.html(r) } if (s.focus) { o = t.prev(".thunder-notification-focus"); if (o.size() == 0) { t.before('<div class="thunder-notification-focus"></div>'); o = t.prev(".thunder-notification-focus") } } t.css("opacity", "1"); if (s.animate) { if (s.focus) { u.animate({ scrollTop: o.offset().top - 20 }, "slow", function () { t.slideDown() }) } else { t.slideDown() } } else { u.scrollTop(o.offset().top - 20); t.show() } if (s.close.show) { var l = e('<a class="close" href="#"></a>'); l.attr("title", s.close.title); t.append(l); l.click(function (e) { if (s.animate) { t.slideUp() } else { t.hide() } e.preventDefault() }); if (s.autoClose.enable) { window.setTimeout(function () { if (t.css("display") != "none") { l.trigger("click") } }, s.autoClose.delay == undefined ? 5e3 : s.autoClose.delay) } } }, success: function (n, r) { return this.each(function () { t.message.create(e(this), "thunder-success", n, r) }) }, error: function (n, r) { return this.each(function () { t.message.create(e(this), "thunder-error", n, r) }) }, attention: function (n, r) { return this.each(function () { t.message.create(e(this), "thunder-attention", n, r) }) }, information: function (n, r) { return this.each(function () { t.message.create(e(this), "thunder-information", n, r) }) } } }; e.fn.message = function (n) { if (t.message[n]) { return t.message[n].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof n == "object" || typeof n == "string") { return t.message.success.apply(this, arguments) } else { e.error("Method " + n + " does not exist on jQuery.message") } }; e.fn.ajaxForm = function (t) { var n = e(this); var r = e.extend({ message: null, loading: null, focus: true, disableElements: "input,select,textarea,button", cssFieldError: "thunder-form-field-error", onSuccess: function () { }, onBefore: function () { }, onComplete: function () { }, onBeforeSubmit: function () { } }, t); var i = e(r.message); var s = e(r.loading); var o = n.find('input[type="submit"]'); var u = n.parent().css("overflow") == "visible" ? e("html:not(:animated),body:not(:animated)") : n.parent(); if (i.size() == 0 && n.prev(".thunder-form-message").size() == 0) { n.before('<div class="thunder-form-message"></div>'); i = n.prev(".thunder-form-message") } if (s.size() == 0) { o.after('<span class="thunder-form-loading"></span>'); s = n.find(".thunder-form-loading"); s.css({ "margin-top": -o.outerHeight(), "margin-left": o.outerWidth() + 2 }) } n.data("message", i); i.hide(); s.hide(); if (!n.attr("action") || e.trim(n.attr("action")) == "") { i.message("error", "Form action no exist.") } n.live("submit", function () { i.hide(); r.onBeforeSubmit(); e.ajax({ statusCode: statusCode(i, { focus: true }), url: n.attr("action"), type: n.attr("method"), headers: { "Thunder-Ajax": true }, data: n.serialize(), beforeSend: function () { e(r.disableElements, n).disableElement(); e("input,select,textarea", n).removeClass(r.cssFieldError); s.show(); r.onBefore() }, complete: function () { e(r.disableElements, n).enableElement(); s.hide(); r.onComplete() }, success: function (t) { window.setTimeout(function () { if (typeof t == "object") { if (t.Status) { if (t.Status == 200) { r.onSuccess(n, t) } else { if (t.Messages) { if (t.Status == 202) { i.message("error", t.Messages, { focus: true }) } else if (t.Status == 203) { i.message("information", t.Messages, { focus: true }) } else if (t.Status == 204) { i.message("attention", t.Messages, { focus: true }) } e.each(t.Messages, function () { e('input[name="' + this.Field + '"],select[name="' + this.Field + '"],textarea[name="' + this.Field + '"]').addClass(r.cssFieldError) }) } else { i.message("error", "Message no exist in request result.", { focus: true }) } } } } else { if (e(t).is(".thunder-notification")) { i.html(t); if (r.focus) { u.animate({ scrollTop: i.offset().top - 20 }, "slow", function () { i.slideDown() }) } else { i.slideDown() } } else { r.onSuccess(n, t) } } }, 0) } }); return false }) }; e.fn.grid = function (t) { var n = e(this); var r = e.extend({ message: null, loading: null, form: null, url: n.data("url"), pageSize: !n.data("page-size") ? 10 : n.data("page-size"), load: !n.data("load") ? true : n.data("load"), orders: [], onComplete: function () { }, onBeforeSubmit: function () { } }, t); var i = e(r.message); var s = e(r.loading); var o = e(r.form); var u = e('<div class="thunder-grid-content"></div>'); if (!r.load) { u.html(n.html()) } n.html(u); if (i.size() == 0 && n.prev(".thunder-grid-message").size() == 0) { n.before('<div class="thunder-grid-message"></div>'); i = n.prev(".thunder-grid-message") } if (o.size() == 0) { n.prepend('<form class="thunder-grid-form"></form>'); o = e(".thunder-grid-form", n) } o.append('<input type="hidden" name="CurrentPage" value="0" />'); o.append('<input type="hidden" name="PageSize" value="' + r.pageSize + '" />'); o.setOrders(r.orders); if (!r.url || r.url == "") { i.message("error", "Url is null."); return } var a = function () { if (e(r.loading).size() == 0) { u.html('<div class="thunder-grid-loading"><img src="' + e.thunder.settings.images.loadingGrid + '" /></div>'); s = e(".thunder-grid-loading", u) } s.hide() }; var f = function (t) { r.onBeforeSubmit(); e.ajax({ statusCode: statusCode(i), type: "POST", data: o.serialize(), url: r.url, headers: { "Thunder-Ajax": true }, beforeSend: function () { t.show() }, complete: function () { t.hide() }, success: function (t) { if (typeof t == "string") { u.html(t); e("tbody tr:even", n).addClass("even"); r.onComplete(n) } } }) }; var l = function (t) { e('input:hidden[name="CurrentPage"]', o).val(t); f(e(".thunder-paged-loading", n)) }; if (r.load) { a(); f(s) } o.submit(function () { e('input:hidden[name="CurrentPage"]', o).val(0); a(); f(s); return false }); e("a.thunder-grid-paged", n).live("click", function (t) { var n = e(this); if (!n.is(".disabled")) { l(n.data("page")) } t.preventDefault() }); e("a.thunder-grid-order", n).live("click", function (t) { var n = e(this); if (n.data("column") != "undefined" && n.data("asc") != "undefined") { o.setOrders([{ Column: n.data("column"), Asc: n.data("asc")}]); e('input:hidden[name="CurrentPage"]', o).val(0); f(s) } t.preventDefault() }); e("select.thunder-grid-paged", n).live("change", function () { var t = e(this); l(e("option:selected", t).val()) }) }; e.fn.modal = function (t) { var n = e.extend({ iframe: false, iframeScroll: "no", url: "", width: 600, centerLoading: true, cssClass: "", noCache: true, onOpen: function () { }, onClose: function () { } }, t); return this.each(function () { var t = e(this); t.live("click", function (r) { e.extend(n, { iframe: t.data("iframe") != undefined ? t.data("iframe") : n.iframe, iframeScroll: t.data("iframe-scroll") != undefined ? t.data("iframe-scroll") : n.iframeScroll, url: t.is("a") ? t.attr("href") : n.url, width: t.data("width") != undefined ? t.data("width") : n.width, height: t.data("height") != undefined ? t.data("height") : n.height, centerLoading: t.data("center-loading") != undefined ? t.data("center-loading") : n.centerLoading, cssClass: t.data("css-class") != undefined ? t.data("css-class") : n.cssClass, noCache: t.data("no-cache") != undefined ? t.data("no-cache") : n.noCache }); e.modal(n); r.preventDefault() }) }) }; e.modal = function (t) { var n = e.extend({ iframe: false, iframeScroll: "no", url: "", width: 600, centerLoading: true, cssClass: "", noCache: true, onOpen: function () { }, onClose: function () { } }, t); var r = '<div class="thunder-modal-loading"><img src="' + e.thunder.settings.images.loadingModal + '" /></div>'; if (e("body")["dialog"] == undefined) { e.error("This project not implement jquery.ui."); return } if (e(".thunder-modal").size() == 0) { e("body").prepend('<div class="thunder-modal"></div>') } var i = e(".thunder-modal", e("body")).addClass(n.cssClass); i.dialog(e.extend(n, { autoOpen: true, modal: true, resizable: false, draggable: false, open: function () { e(".ui-dialog-titlebar ").remove(); i.empty(); i.append(r); r = e(".thunder-modal-loading", i); if (n.centerLoading) { e("img", r).load(function () { r.css({ position: "absolute", top: "50%", left: "50%" }); if (e.browser.msie) { var t = this; r.show(); window.setTimeout(function () { r.css({ "margin-left": "-" + t.width / 2 + "px", "margin-top": "-" + t.height / 2 + "px" }) }, 10) } else { r.css({ "margin-left": "-" + this.width / 2 + "px", "margin-top": "-" + this.height / 2 + "px" }).show() } }) } else { r.show() } if (n.iframe) { var t = e('<iframe frameborder="0" marginheight="0" marginwidth="0" scrolling="auto"></iframe>').hide(); if (n.noCache) { if (n.url.lastIndexOf("?") != -1) { n.url += "&" } else { n.url += "?" } n.url += "nocache=" + parseInt(Math.random() * 9999999999) } t.attr("scrolling", n.iframeScroll); t.attr("width", i.width()); t.attr("height", i.height()); i.css("overflow", "hidden"); i.append(t); t.attr("src", n.url); t.load(function () { t.show(); r.remove(); var s = t.contents().find(".thunder-modal-close"); s.click(function (e) { e.preventDefault(); i.dialog("close") }); if (n.closeOnEscape == undefined || n.closeOnEscape) { t.contents().on("keydown", function (t) { if (t.keyCode === e.ui.keyCode.ESCAPE) { i.dialog("close") } t.stopPropagation() }) } n.onOpen(t.contents()) }) } else { i.append('<div class="thunder-modal-message"></div>'); e.ajax({ statusCode: statusCode(e(".thunder-modal-message", i), { close: { show: false} }), headers: { "Thunder-Ajax": true, "Thunder-Modal": true }, url: n.url, success: function (t) { i.html(t); e(".thunder-modal-close", i).click(function (e) { e.preventDefault(); i.dialog("close") }); n.onOpen(i) } }) } }, beforeClose: function () { n.onClose(i); i.empty(); i.dialog("destroy") } })) }; e.closeModal = function () { if (e(".thunder-modal").size() > 0) { e(".thunder-modal").dialog("close") } }; e.confirm = function (t, n) { var r = e.extend(e.thunder.settings.confirm, { width: 480, height: "auto", cssClass: "", onYes: function () { }, onNo: function () { } }, n); if (e("body")["dialog"] == undefined) { e.error("This project not implement jquery.ui."); return } if (e(".thunder-confirm").size() == 0) { e("body").prepend('<div class="thunder-confirm"></div>') } var i = e('<a href="#" class="thunder-confirm-yes"></a>').html(r.label.yes); var s = e('<a href="#" class="thunder-confirm-no"></a>').html(r.label.no); var o = e('<div class="thunder-confirm-message"></div>').html(t); var u = e('<div class="thunder-confirm-action"></div>').append(i).append(s); var a = e(".thunder-confirm", e("body")).addClass(r.cssClass).append(o).append(u); i.click(function (e) { r.onYes(); a.dialog("close"); e.preventDefault() }); s.click(function (e) { r.onNo(); a.dialog("close"); e.preventDefault() }); a.dialog({ autoOpen: true, modal: true, resizable: false, closeOnEscape: false, draggable: false, width: r.width, height: r.height, open: function () { e(".ui-dialog-titlebar ").remove() }, close: function () { a.remove(); a.dialog("destroy") } }) }; e.alert = function (t, n) { var r = e.extend(e.thunder.settings.alert, { width: 480, height: "auto", cssClass: "", onOk: function () { } }, n); if (e("body")["dialog"] == undefined) { e.error("This project not implement jquery.ui."); return } if (e(".thunder-alert").size() == 0) { e("body").prepend('<div class="thunder-alert"></div>') } var i = e('<a href="#" class="thunder-alert-ok"></a>').html(r.label.ok); var s = e('<div class="thunder-alert-message"></div>').html(t); var o = e('<div class="thunder-alert-action"></div>').append(i); var u = e(".thunder-alert", e("body")).addClass(r.cssClass).append(s).append(o); i.click(function (e) { r.onOk(); u.dialog("close"); e.preventDefault() }); u.dialog({ autoOpen: true, modal: true, resizable: false, closeOnEscape: false, draggable: false, width: r.width, height: r.height, open: function () { e(".ui-dialog-titlebar ").remove() }, close: function () { u.remove(); u.dialog("destroy") } }) }; e.fn.setOrders = function (t) { return this.each(function () { var n = e(this); e("input.thunder-grid-order", n).remove(); e.each(t, function (e) { n.append('<input type="hidden" class="thunder-grid-order" name="Orders[' + e + '].Column" value="' + this.Column + '" />'); n.append('<input type="hidden" class="thunder-grid-order" name="Orders[' + e + '].Asc" value="' + this.Asc + '" />') }) }) }; e.fn.disableElement = function () { return this.each(function () { e(this).attr("disabled", "disabled") }) }; e.fn.enableElement = function () { return this.each(function () { e(this).removeAttr("disabled") }) }; e.fn.serializeObject = function () { var t = {}; var n = this.serializeArray(); e.each(n, function () { if (t[this.name]) { if (!t[this.name].push) { t[this.name] = [t[this.name]] } t[this.name].push(this.value || "") } else { t[this.name] = this.value || "" } }); return t }; statusCode = function (t, n) { var r = e.extend({}, n); return { 400: function () { t.message("error", "Bad request.", r); e(".thunder-modal-loading").hide() }, 401: function () { t.message("error", "Unauthorized.", r); e(".thunder-modal-loading").hide() }, 403: function () { t.message("error", "Forbidden.", r); e(".thunder-modal-loading").hide() }, 404: function () { t.message("error", "Page not found.", r); e(".thunder-modal-loading").hide() }, 405: function () { t.message("error", "Method not allowed.", r); e(".thunder-modal-loading").hide() }, 407: function () { t.message("error", "Proxy authentication required.", r); e(".thunder-modal-loading").hide() }, 408: function () { t.message("error", "Request timeout.", r); e(".thunder-modal-loading").hide() }, 500: function () { t.message("error", "Internal server error.", r); e(".thunder-modal-loading").hide() }, 501: function () { t.message("error", "Not implemented.", r); e(".thunder-modal-loading").hide() }, 502: function () { t.message("error", "Bad gateway.", r); e(".thunder-modal-loading").hide() }, 503: function () { t.message("error", "Service unavailable.", r); e(".thunder-modal-loading").hide() } } }; String.prototype.replaceAll = function (e, t) { var n = this; var r = n.indexOf(e); while (r > -1) { n = n.replace(e, t); r = n.indexOf(e) } return n }; e(function () { e.each(e("form[data-ajax]"), function () { var t = e(this); if (t.data("ajax")) { t.ajaxForm({ onBefore: function () { if (window[t.data("ajax-before")]) { window[t.data("ajax-before")]() } }, onComplete: function () { if (window[t.data("ajax-complete")]) { window[t.data("ajax-complete")]() } }, onSuccess: function (e, n) { if (window[t.data("ajax-success")]) { window[t.data("ajax-success")](e, n) } } }) } }) }) })(jQuery)